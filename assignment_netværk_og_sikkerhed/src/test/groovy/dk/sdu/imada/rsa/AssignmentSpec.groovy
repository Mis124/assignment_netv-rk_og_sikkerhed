package dk.sdu.imada.rsa;

class AssignmentSpec extends spock.lang.Specification {


	void "test euclidean algorithm"() {
		setup:
		BigInteger a = 123456544
		BigInteger b = 9955487

		when:
		BigInteger[] result = NumberHelpers.extendedEuclideanAlgorithm(123456544,9955487)
		BigInteger r = result[0]
		BigInteger s = result[1]
		BigInteger t = result[2]

		println "gcd($a , $b) is [$r , $s , $t]"
		println "So $s * $a + $t * $b = $r"
		println "r = $r"
		println "s = $s"
		println "t = $t"

		then:
		s*a + t*b == r
	}

	void "Test encryption"() {
		given:
		RSA rsa = new RSA(1156561771779226504385211474703634660706188015894269578454843,
				1369432560389383877017373383790225389216006713827806996905907,
				47431565080882922701)

		when:
		String encrypted = rsa.encryptMessage("what a lovely little coding exercise this is")
		println "The encrypted message for 'what a lovely little coding exercise this is' is\n$encrypted"

		then:
		encrypted == """The answer should replace this message>"""
	}



	void "Test decryption"() {
		given:
		RSA rsa = new RSA(1156561771779226504385211474703634660706188015894269578454843,
				1369432560389383877017373383790225389216006713827806996905907,
				47431565080882922701)

		when:
		String ciphertext = """336216001955799973283533256998397373836141999555184519761196766264954723610920307171355356505424929167224067372219794532
302286219653965167459263235702681294846428005520618177095225915717528729805605628186530648832975686071861542421630561180
1078235653171137305053900063698133222196278492453773809114065251893913288826902674138706036698864473733693248280749763387
998188072042047018840157501686952011247267143978612603855700530427967658851167558155132399455187295414405906761652603062
513578098498969524053407272428354906735546271631285678018469031970938388999265027135961146878413579606568934118797790159
934067581824161915279826819720992145677934648776525640526823636655366690610675711901642345683304460941823244590506676713
874076072127560509439990174995588986201755185192072780500080622183391401241127271200636512853681446941139429526190987577
89867712631809664423179222515272977751754221870350748670395232217533230402076335571551745424874976238275204041865185346
561201897334532081332338821170508292253339835708180577480093499972323127741754499309578336519311800722693402452687748106
274214884203829201096353674618606617739794189787255192208007161253109674457304683566872695892256004494680167889485669849
1422333330321288598291155642925140904154836481687028516503899374651678756813272565341146923014033253818776573156516131760
957244469705779320289102535846209210859432145425802560905562054763497594691493656792585584732573574911398488725541264011
1243685563833140319042018173858736917242384042770528875397892375102938363032021115228921547711774840164018595637064323407
9640675387455691327695570212834322617530266934904751775484942131191770710924295132961825663187489623475934327412155942
318611132930261347438269047353316388284563260924439286038614900625776333368849129091082446948742642833946262730403347891
"""

		then:
		println "The ciphertext decrypted is:"
		println rsa.decrypt(ciphertext)
		rsa.decrypt(ciphertext) == "Replace this message with the result"
	}
}
